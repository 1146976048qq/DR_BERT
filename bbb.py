# 序列连续
#我们都做过一种找规律的题目，即给出你一个序列的前若干位，让你填写后面的若干位
#现在告诉你某个序列中仅包含1-n之间的所有整数，给出你这个序列的前m位，后面的数字则遵循以下规则生成：
#每一个位置会从1-n中选择一个之前出现次数最少的数字，如果有若干个出现次数最少的数字，则选择最小的数字。
#例如仅包含1-3的序列中前4位数1 2 2 3，则生成的后4位是1 3 1 2

#输入描述：
#第一行两个整数n和m，分别表示序列中仅包含1-n之间的所有整数，以及给出的前m位数
#第二行m个整数，表示给出的前m位数
#1<=n<=100000
#1<=m<=100000
#输出描述：
#输出仅包含1行，请你输出该序列的后m位数字，中间用空格隔开
#输入例子：
#3 4
#1 2 2 3

#输出例子：
#1 3 1 2



while True:
    try:
        n, m = map(int, input().split()) #输入序列中仅包含1-n之间的所有整数，以及给出的前m位数
        nums = list(map(int, input().split())) #输入给出的前m位数
        count = [0] * (n + 1) #初始化一个长度为n+1的列表，用来存储每个数字出现的次数
        for i in nums: #遍历给出的前m位数
            count[i] += 1 #每个数字出现的次数加1
        for i in range(m, 2 * m): #遍历后m位数
            min_num = count.index(min(count)) #找到出现次数最少的数字
            nums.append(min_num) #将出现次数最少的数字加入到列表中
            count[min_num] += 1 #出现次数最少的数字出现的次数加1
        print(' '.join(map(str, nums))) #输出后m位数
    except:
        break










